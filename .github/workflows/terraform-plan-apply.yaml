name: Terraform Plan and Apply

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to run the workflow."
        type: string
        required: true
      main-repo:
        description: main repository to be used
        required: true
        type: string 

jobs:
  plan:
    name: Validate and plan changes on ${{inputs.environment}} environment
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{inputs.environment}}
      BUILDING_BLOCK_NAME: ${{inputs.main-repo}}
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Pull the repo changes done on the previous job
        run: git pull

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure EKS Cluster
        if: ${{ inputs.eks-services == 'true' }}
        run: |
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{inputs.eks-cluster}} || echo "Warning: Failed to update kubeconfig for EKS cluster ${{inputs.eks-cluster}}"

      - name: Terraform Init
        run: terraform init -input=false -backend=true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: tf_plan
        run: |
          terraform plan -out=tfplan.json

          terraform show -no-color tfplan.json 2>&1 > tfplan.txt

          # Parse tfplan.txt
          plan_line=$(grep "Plan:" tfplan.txt || echo "No changes")

          if [[ "$plan_line" == "Plan:"* ]]; then
              TF_PLAN_ADD=$(echo "$plan_line" | awk '{print $2}')
              TF_PLAN_CHANGE=$(echo "$plan_line" | awk '{print $5}')
              TF_PLAN_DESTROY=$(echo "$plan_line" | awk '{print $8}')
          else
              # If the plan lines don't start with "Plan:", set all variables to 0
              TF_PLAN_ADD=0
              TF_PLAN_CHANGE=0
              TF_PLAN_DESTROY=0
          fi

          # Print the variables and store as output
          echo "TF_PLAN_ADD: $TF_PLAN_ADD"
          echo "TF_PLAN_CHANGE: $TF_PLAN_CHANGE"
          echo "TF_PLAN_DESTROY: $TF_PLAN_DESTROY"

  apply:
    name: Apply changes on ${{inputs.environment}} environment
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{inputs.environment}}
      BUILDING_BLOCK_NAME: ${{inputs.main-repo}}

    permissions:
      contents: read
    needs: [plan]
    environment: ${{inputs.environment}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull the repo changes done on the previous job
        run: git pull

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure EKS Cluster
        if: ${{ inputs.eks-services == 'true' }}
        run: |
              aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{inputs.eks-cluster}} || echo "Warning: Failed to update kubeconfig for EKS cluster ${{inputs.eks-cluster}}"

      - name: Terraform Init
        run: terraform init -input=false -backend=true

      - name: Terraform Apply
        run: terraform apply --auto-approve
